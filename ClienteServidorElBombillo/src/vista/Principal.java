package vista;

import java.awt.Color;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Principal extends javax.swing.JFrame {
    
    private Color color;
    private Color colorFondo = new Color(238, 238, 238, 255);
    private Scanner entrada; 
    private PrintStream salida; 
    private ServerSocket escuchador;
    
    public Principal() {
        initComponents();
        
        color = arrancarServidor();
        
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tglBtnEncendidoApagado = new javax.swing.JToggleButton();
        lblColor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("El Bombillo");

        tglBtnEncendidoApagado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tglBtnEncendidoApagado.setText("Encendido/ Apagado");
        tglBtnEncendidoApagado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglBtnEncendidoApagadoActionPerformed(evt);
            }
        });

        lblColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblColor.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblColor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(182, Short.MAX_VALUE)
                .addComponent(tglBtnEncendidoApagado, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblColor, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tglBtnEncendidoApagado, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tglBtnEncendidoApagadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglBtnEncendidoApagadoActionPerformed
        if (tglBtnEncendidoApagado.isSelected()){
            lblColor.setBackground(color);
        } else {
            lblColor.setBackground(colorFondo);
        }
        
        
    }//GEN-LAST:event_tglBtnEncendidoApagadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblColor;
    private javax.swing.JToggleButton tglBtnEncendidoApagado;
    // End of variables declaration//GEN-END:variables

    private Color arrancarServidor() {
        ServerSocket escuchador = null;
        Socket conexion = null;
        Scanner entrada = null;
        PrintStream salida = null;
        String lineaRecibida;
        String[] lineaRecibidaParseada;
        int rojo, verde, azul;
        
        //Creamos un "listener" en el puerto 5555
        try {
            escuchador = new ServerSocket(5555);
        } catch (IOException ex) {
            System.out.println("El puerto 5555 está siendo usado por otro servidor");
        }
        
        //Esperamos la conexión de un cliente
        try {
            conexion = escuchador.accept();
        } catch (IOException ex) {
            System.out.println("Error. Se ha cerrado un puerto");
        }
        
        //Obtenemos los puntos de E/S
        try {
            entrada = new Scanner(conexion.getInputStream());
            salida = new PrintStream(conexion.getOutputStream());
        } catch (IOException ex) {
            System.out.println("Error al obtener salida hacia el cliente");
        }
        
        try {
            salida.println("Bienvenido a El Bombillo, tu Servidor de representacion de colores");
            salida.println("Escribe el color que quieres representar, en el siguiente formato rojo#verde#azul");
            salida.println("Ejemplo: 237#28#36");
            salida.print("Color?: ");
            salida.flush();
            
            //Recibimos la frase entrante
            lineaRecibida = entrada.nextLine();
            
            //Procesamos la petición que en este caso es parsear los datos recibidos
            lineaRecibidaParseada = lineaRecibida.split("#");
            
            if (lineaRecibidaParseada.length == 3) {
                rojo = Integer.valueOf(lineaRecibidaParseada[0]);
                verde = Integer.valueOf(lineaRecibidaParseada[1]);
                azul = Integer.valueOf(lineaRecibidaParseada[2]);
                
                if ((rojo >= 0 && rojo < 256) && (verde >= 0 && verde < 256) && (azul >= 0 && azul < 256)) {
                    Color color = new Color(rojo, verde, azul);
                    cerrarServidor();
                    return color;
                } else {
                    salida.println("Peticion incorrecta");
                }
                
            } else {
                salida.println("Peticion incorrecta");
            }

            //Nos despedimos
            salida.println("Gracias por usar El Bombillo. Bye, bye");

            //Cerramos los puntos de E/S
            cerrarServidor();
            
        } catch (NumberFormatException numberFormatException) {
            salida.println("Peticion incorrecta");
            salida.println("Gracias por usar El Bombillo. Bye, bye");
            cerrarServidor();
        }
        
        try {
            escuchador.close();
        } catch (IOException ex) {
        }
        return null;
    }

    private void cerrarServidor() {
        entrada.close();
        salida.close();
        try {
            escuchador.close();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
